using System;
using System.Collections.Generic;
using System.Linq;

namespace Blazor.WhyDidYouRender.Records.StateTracking;

/// <summary>
/// Represents the result of a state change detection operation in a thread-safe environment.
/// This record provides immutable information about detected state changes and operation metadata.
/// </summary>
/// <remarks>
/// StateChangeResult is returned by thread-safe state change detection operations and contains
/// information about what changes were detected, when they were detected, and any errors that
/// occurred during the detection process.
/// </remarks>
public record StateChangeResult
{
    /// <summary>
    /// Gets whether any state changes were detected.
    /// </summary>
    public bool HasChanges { get; init; }

    /// <summary>
    /// Gets the list of detected state changes.
    /// </summary>
    public IReadOnlyList<StateChange> Changes { get; init; } = Array.Empty<StateChange>();

    /// <summary>
    /// Gets the UTC timestamp when the state changes were detected.
    /// </summary>
    public DateTime DetectedAt { get; init; } = DateTime.UtcNow;

    /// <summary>
    /// Gets the managed thread ID of the thread that performed the detection.
    /// </summary>
    public int ThreadId { get; init; } = Environment.CurrentManagedThreadId;

    /// <summary>
    /// Gets the error message if the detection operation failed.
    /// </summary>
    public string? Error { get; init; }

    /// <summary>
    /// Gets the exception that caused the detection to fail, if any.
    /// </summary>
    public Exception? Exception { get; init; }

    /// <summary>
    /// Gets the duration of the state change detection operation.
    /// </summary>
    public TimeSpan DetectionDuration { get; init; }

    /// <summary>
    /// Gets additional context information about the detection operation.
    /// </summary>
    public string? Context { get; init; }

    /// <summary>
    /// Gets whether the detection operation completed successfully.
    /// </summary>
    public bool IsSuccessful => string.IsNullOrEmpty(Error) && Exception == null;

    /// <summary>
    /// Gets the number of state changes detected.
    /// </summary>
    public int ChangeCount => Changes.Count;

    /// <summary>
    /// Gets the age of this result since detection.
    /// </summary>
    public TimeSpan Age => DateTime.UtcNow - DetectedAt;

    /// <summary>
    /// Gets whether this result was generated by the current thread.
    /// </summary>
    public bool IsFromCurrentThread => ThreadId == Environment.CurrentManagedThreadId;

    /// <summary>
    /// Gets the types of changes that were detected.
    /// </summary>
    public IEnumerable<StateChangeType> ChangeTypes => Changes.Select(c => c.ChangeType).Distinct();

    /// <summary>
    /// Gets whether any critical changes were detected.
    /// </summary>
    public bool HasCriticalChanges => Changes.Any(c => c.ChangeType == StateChangeType.ValueChanged);

    /// <summary>
    /// Gets a brief status description of the detection result.
    /// </summary>
    public string Status => IsSuccessful 
        ? (HasChanges ? $"{ChangeCount} changes detected" : "No changes") 
        : "Detection failed";

    /// <summary>
    /// Creates a successful state change result with detected changes.
    /// </summary>
    /// <param name="changes">The detected state changes.</param>
    /// <param name="detectionDuration">How long the detection took.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A successful StateChangeResult.</returns>
    public static StateChangeResult Success(
        IEnumerable<StateChange> changes, 
        TimeSpan detectionDuration = default,
        string? context = null)
    {
        var changeList = changes.ToList();
        return new StateChangeResult
        {
            HasChanges = changeList.Count > 0,
            Changes = changeList,
            DetectionDuration = detectionDuration,
            Context = context
        };
    }

    /// <summary>
    /// Creates a successful state change result with no changes detected.
    /// </summary>
    /// <param name="detectionDuration">How long the detection took.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A StateChangeResult indicating no changes.</returns>
    public static StateChangeResult NoChanges(
        TimeSpan detectionDuration = default,
        string? context = null) => new()
    {
        HasChanges = false,
        DetectionDuration = detectionDuration,
        Context = context
    };

    /// <summary>
    /// Creates a failed state change result.
    /// </summary>
    /// <param name="error">The error message.</param>
    /// <param name="exception">The exception that caused the failure.</param>
    /// <param name="detectionDuration">How long the detection took before failing.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A failed StateChangeResult.</returns>
    public static StateChangeResult Failure(
        string error,
        Exception? exception = null,
        TimeSpan detectionDuration = default,
        string? context = null) => new()
    {
        HasChanges = false,
        Error = error,
        Exception = exception,
        DetectionDuration = detectionDuration,
        Context = context
    };

    /// <summary>
    /// Gets changes of a specific type.
    /// </summary>
    /// <param name="changeType">The type of changes to retrieve.</param>
    /// <returns>Changes of the specified type.</returns>
    public IEnumerable<StateChange> GetChangesByType(StateChangeType changeType) =>
        Changes.Where(c => c.ChangeType == changeType);

    /// <summary>
    /// Gets changes for a specific field.
    /// </summary>
    /// <param name="fieldName">The name of the field.</param>
    /// <returns>Changes for the specified field.</returns>
    public IEnumerable<StateChange> GetChangesForField(string fieldName) =>
        Changes.Where(c => c.FieldName.Equals(fieldName, StringComparison.OrdinalIgnoreCase));

    /// <summary>
    /// Gets a formatted summary of the state change detection result.
    /// </summary>
    /// <returns>A formatted string with detection result information.</returns>
    public string GetFormattedSummary()
    {
        var summary = $"State Change Detection Result:\n" +
                     $"  Status: {Status}\n" +
                     $"  Detected At: {DetectedAt:HH:mm:ss.fff}\n" +
                     $"  Thread ID: {ThreadId}\n" +
                     $"  Duration: {DetectionDuration.TotalMilliseconds:F2}ms\n" +
                     $"  Age: {Age}";

        if (HasChanges)
        {
            summary += $"\n  Changes ({ChangeCount}):\n";
            foreach (var change in Changes.Take(5)) // Show first 5 changes
            {
                summary += $"    â€¢ {change.FieldName}: {change.ChangeType}\n";
            }
            
            if (Changes.Count > 5)
            {
                summary += $"    ... and {Changes.Count - 5} more changes\n";
            }
        }

        if (!string.IsNullOrEmpty(Context))
        {
            summary += $"\n  Context: {Context}";
        }

        if (!IsSuccessful)
        {
            summary += $"\n  Error: {Error}";
        }

        return summary;
    }

    /// <summary>
    /// Creates a copy of this result with additional context.
    /// </summary>
    /// <param name="additionalContext">Additional context to append.</param>
    /// <returns>A new StateChangeResult with updated context.</returns>
    public StateChangeResult WithContext(string additionalContext)
    {
        var newContext = string.IsNullOrEmpty(Context) 
            ? additionalContext 
            : $"{Context}; {additionalContext}";
        
        return this with { Context = newContext };
    }
}
