using System;
using System.Collections.Generic;
using System.Linq;

namespace Blazor.WhyDidYouRender.Records.StateTracking;

/// <summary>
/// Represents the health status of thread-safe state tracking operations.
/// This record provides immutable information about threading health, issues, and recommendations.
/// </summary>
/// <remarks>
/// ThreadingHealthStatus is generated by health monitoring systems to provide insights into
/// the current state of threading operations. It includes severity levels, identified issues,
/// and actionable recommendations for maintaining optimal threading performance.
/// </remarks>
public record ThreadingHealthStatus {
    /// <summary>
    /// Gets the overall severity level of the threading health status.
    /// </summary>
    public ThreadingHealthSeverity Severity { get; init; } = ThreadingHealthSeverity.Healthy;

    /// <summary>
    /// Gets the list of identified threading issues.
    /// </summary>
    public IReadOnlyList<string> Issues { get; init; } = Array.Empty<string>();

    /// <summary>
    /// Gets the UTC timestamp when this health check was performed.
    /// </summary>
    public DateTime CheckTime { get; init; } = DateTime.UtcNow;

    /// <summary>
    /// Gets the threading information that was analyzed.
    /// </summary>
    public ThreadingInfo? ThreadingInfo { get; init; }

    /// <summary>
    /// Gets the configuration used for health thresholds.
    /// </summary>
    public ThreadingConfiguration? Configuration { get; init; }

    /// <summary>
    /// Gets recommendations for improving threading health.
    /// </summary>
    public IReadOnlyList<string> Recommendations { get; init; } = Array.Empty<string>();

    /// <summary>
    /// Gets additional context about the health check.
    /// </summary>
    public string? Context { get; init; }

    /// <summary>
    /// Gets the number of issues identified.
    /// </summary>
    public int IssueCount => Issues.Count;

    /// <summary>
    /// Gets whether the threading system is considered healthy.
    /// </summary>
    public bool IsHealthy => Severity == ThreadingHealthSeverity.Healthy;

    /// <summary>
    /// Gets whether the threading system requires immediate attention.
    /// </summary>
    public bool RequiresImmediateAttention => Severity >= ThreadingHealthSeverity.Error;

    /// <summary>
    /// Gets whether the threading system has critical issues.
    /// </summary>
    public bool IsCritical => Severity == ThreadingHealthSeverity.Critical;

    /// <summary>
    /// Gets the age of this health check.
    /// </summary>
    public TimeSpan Age => DateTime.UtcNow - CheckTime;

    /// <summary>
    /// Gets whether this health status is stale.
    /// </summary>
    /// <param name="threshold">The age threshold for considering status stale.</param>
    /// <returns>True if the status is older than the threshold; otherwise, false.</returns>
    public bool IsStale(TimeSpan threshold) => Age > threshold;

    /// <summary>
    /// Gets a brief status description.
    /// </summary>
    public string StatusDescription => Severity switch {
        ThreadingHealthSeverity.Healthy => "System is operating normally",
        ThreadingHealthSeverity.Warning => $"Minor issues detected ({IssueCount} issues)",
        ThreadingHealthSeverity.Error => $"Significant issues require attention ({IssueCount} issues)",
        ThreadingHealthSeverity.Critical => $"Critical issues require immediate action ({IssueCount} issues)",
        _ => "Unknown status"
    };

    /// <summary>
    /// Creates a healthy threading status.
    /// </summary>
    /// <param name="threadingInfo">Optional threading information.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A healthy ThreadingHealthStatus.</returns>
    public static ThreadingHealthStatus Healthy(ThreadingInfo? threadingInfo = null, string? context = null) => new() {
        Severity = ThreadingHealthSeverity.Healthy,
        ThreadingInfo = threadingInfo,
        Context = context
    };

    /// <summary>
    /// Creates a warning threading status with issues.
    /// </summary>
    /// <param name="issues">The identified issues.</param>
    /// <param name="recommendations">Optional recommendations.</param>
    /// <param name="threadingInfo">Optional threading information.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A warning ThreadingHealthStatus.</returns>
    public static ThreadingHealthStatus Warning(
        IEnumerable<string> issues,
        IEnumerable<string>? recommendations = null,
        ThreadingInfo? threadingInfo = null,
        string? context = null) => new() {
            Severity = ThreadingHealthSeverity.Warning,
            Issues = issues.ToList(),
            Recommendations = recommendations?.ToList() ?? new List<string>(),
            ThreadingInfo = threadingInfo,
            Context = context
        };

    /// <summary>
    /// Creates an error threading status with issues.
    /// </summary>
    /// <param name="issues">The identified issues.</param>
    /// <param name="recommendations">Optional recommendations.</param>
    /// <param name="threadingInfo">Optional threading information.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>An error ThreadingHealthStatus.</returns>
    public static ThreadingHealthStatus Error(
        IEnumerable<string> issues,
        IEnumerable<string>? recommendations = null,
        ThreadingInfo? threadingInfo = null,
        string? context = null) => new() {
            Severity = ThreadingHealthSeverity.Error,
            Issues = issues.ToList(),
            Recommendations = recommendations?.ToList() ?? new List<string>(),
            ThreadingInfo = threadingInfo,
            Context = context
        };

    /// <summary>
    /// Creates a critical threading status with issues.
    /// </summary>
    /// <param name="issues">The identified issues.</param>
    /// <param name="recommendations">Optional recommendations.</param>
    /// <param name="threadingInfo">Optional threading information.</param>
    /// <param name="context">Optional context information.</param>
    /// <returns>A critical ThreadingHealthStatus.</returns>
    public static ThreadingHealthStatus Critical(
        IEnumerable<string> issues,
        IEnumerable<string>? recommendations = null,
        ThreadingInfo? threadingInfo = null,
        string? context = null) => new() {
            Severity = ThreadingHealthSeverity.Critical,
            Issues = issues.ToList(),
            Recommendations = recommendations?.ToList() ?? new List<string>(),
            ThreadingInfo = threadingInfo,
            Context = context
        };

    /// <summary>
    /// Combines this health status with another, taking the higher severity.
    /// </summary>
    /// <param name="other">The other health status to combine with.</param>
    /// <returns>A new ThreadingHealthStatus with combined information.</returns>
    public ThreadingHealthStatus CombineWith(ThreadingHealthStatus other) {
        var combinedSeverity = (ThreadingHealthSeverity)Math.Max((int)Severity, (int)other.Severity);
        var combinedIssues = Issues.Concat(other.Issues).Distinct().ToList();
        var combinedRecommendations = Recommendations.Concat(other.Recommendations).Distinct().ToList();

        var combinedContext = string.IsNullOrEmpty(Context) ? other.Context :
                             string.IsNullOrEmpty(other.Context) ? Context :
                             $"{Context}; {other.Context}";

        return new ThreadingHealthStatus {
            Severity = combinedSeverity,
            Issues = combinedIssues,
            Recommendations = combinedRecommendations,
            CheckTime = CheckTime > other.CheckTime ? CheckTime : other.CheckTime,
            ThreadingInfo = ThreadingInfo ?? other.ThreadingInfo,
            Configuration = Configuration ?? other.Configuration,
            Context = combinedContext
        };
    }

    /// <summary>
    /// Gets a formatted summary of the threading health status.
    /// </summary>
    /// <returns>A formatted string with comprehensive health information.</returns>
    public string GetFormattedSummary() {
        var summary = $"Threading Health Status:\n" +
                     $"  Severity: {Severity}\n" +
                     $"  Status: {StatusDescription}\n" +
                     $"  Check Time: {CheckTime:HH:mm:ss.fff} (Age: {Age})\n";

        if (Issues.Count > 0) {
            summary += $"  Issues ({Issues.Count}):\n";
            foreach (var issue in Issues) {
                summary += $"    • {issue}\n";
            }
        }

        if (Recommendations.Count > 0) {
            summary += $"  Recommendations ({Recommendations.Count}):\n";
            foreach (var recommendation in Recommendations) {
                summary += $"    → {recommendation}\n";
            }
        }

        if (!string.IsNullOrEmpty(Context)) {
            summary += $"  Context: {Context}\n";
        }

        if (ThreadingInfo != null) {
            summary += $"  Threading Metrics:\n" +
                      $"    Tracked Components: {ThreadingInfo.TrackedComponents}\n" +
                      $"    Active Locks: {ThreadingInfo.ActiveLocks}\n" +
                      $"    Concurrency: {ThreadingInfo.UsedConcurrency}/{ThreadingInfo.MaxConcurrency}\n";
        }

        return summary;
    }

    /// <summary>
    /// Creates a copy of this health status with additional context.
    /// </summary>
    /// <param name="additionalContext">Additional context to append.</param>
    /// <returns>A new ThreadingHealthStatus with updated context.</returns>
    public ThreadingHealthStatus WithContext(string additionalContext) {
        var newContext = string.IsNullOrEmpty(Context)
            ? additionalContext
            : $"{Context}; {additionalContext}";

        return this with { Context = newContext };
    }

    /// <summary>
    /// Creates a copy of this health status with additional recommendations.
    /// </summary>
    /// <param name="additionalRecommendations">Additional recommendations to add.</param>
    /// <returns>A new ThreadingHealthStatus with updated recommendations.</returns>
    public ThreadingHealthStatus WithRecommendations(IEnumerable<string> additionalRecommendations) {
        var newRecommendations = Recommendations.Concat(additionalRecommendations).Distinct().ToList();
        return this with { Recommendations = newRecommendations };
    }
}
