@page "/cross-platform-demo"
@using Blazor.WhyDidYouRender.Components
@inherits TrackedComponentBase

<PageTitle>Cross-Platform Demo - Server</PageTitle>

<h1>WhyDidYouRender Cross-Platform Demo</h1>

<div class="alert alert-success">
    <h4>üñ•Ô∏è Server Environment Detected</h4>
    <p>This demo shows WhyDidYouRender working in Blazor Server mode.</p>
    <p><strong>Check both server console and browser console</strong> for render tracking!</p>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Server-Side Features</h5>
            </div>
            <div class="card-body">
                <p>Current counter: <strong>@currentCount</strong></p>
                <p>Server time: <strong>@DateTime.Now.ToString("HH:mm:ss")</strong></p>
                <p>Session ID: <code>@sessionId</code></p>
                
                <button class="btn btn-primary" @onclick="IncrementCounter">
                    Server Increment
                </button>
                
                <button class="btn btn-info ms-2" @onclick="GetServerTime">
                    Get Server Time
                </button>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Cross-Platform Component</h5>
            </div>
            <div class="card-body">
                <TrackedChildComponent 
                    Title="@childTitle" 
                    Value="@currentCount" />
                
                <div class="mt-3">
                    <button class="btn btn-outline-primary" @onclick="UpdateChildTitle">
                        Update Child Title
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Environment Comparison</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>‚úÖ Server-Side Features:</h6>
                        <ul>
                            <li>Server console logging</li>
                            <li>HttpContext session management</li>
                            <li>Server-side state persistence</li>
                            <li>Real-time server time</li>
                            <li>SignalR connectivity</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>üåê WASM Features (when running in WASM):</h6>
                        <ul>
                            <li>Browser console logging</li>
                            <li>Browser storage session management</li>
                            <li>Client-side state persistence</li>
                            <li>Local browser time</li>
                            <li>Direct JavaScript interop</li>
                        </ul>
                    </div>
                </div>
                
                <div class="alert alert-info mt-3">
                    <h6>üîÑ Cross-Platform Compatibility:</h6>
                    <p class="mb-0">
                        The same WhyDidYouRender library and components work seamlessly in both environments!
                        The library automatically detects the environment and uses the appropriate services.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int currentCount = 0;
    private string childTitle = "Server Child Component";
    private string sessionId = "Loading...";
    
    protected override async Task OnInitializedAsync()
    {
        // Get session ID to demonstrate server session management
        sessionId = $"server-{Guid.NewGuid():N}"[..12];
        await base.OnInitializedAsync();
    }
    
    private void IncrementCounter()
    {
        currentCount++;
    }
    
    private void GetServerTime()
    {
        // Force a re-render to show updated server time
        StateHasChanged();
    }
    
    private void UpdateChildTitle()
    {
        childTitle = $"Updated Server Title {DateTime.Now:mm:ss}";
    }
}
