@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inherits TrackedComponentBase

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates async data loading and tracking with streaming rendering.</p>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="RefreshData" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        }
        else
        {
            <span>Refresh Data</span>
        }
    </button>
    <button class="btn btn-secondary" @onclick="ForceRender">Force Re-render</button>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Call base to ensure tracking
        await base.OnInitializedAsync();

        // Load initial data
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged(); // This will be tracked

        await LoadWeatherData();

        isLoading = false;
        StateHasChanged(); // This will also be tracked
    }

    private void ForceRender()
    {
        // This will call our tracked StateHasChanged method
        StateHasChanged();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
